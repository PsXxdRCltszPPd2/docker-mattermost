#!/bin/bash
set -e

# Compares two version strings `a` and `b`
# Returns
#   - negative integer, if `a` is less than `b`
#   - 0, if `a` and `b` are equal
#   - non-negative integer, if `a` is greater than `b`
vercmp() {
  expr '(' "$1" : '\([^.]*\)' ')' '-' '(' "$2" : '\([^.]*\)' ')' '|' \
       '(' "$1.0" : '[^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0" : '[^.]*[.]\([^.]*\)' ')' '|' \
       '(' "$1.0.0" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0.0" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '|' \
       '(' "$1.0.0.0" : '[^.]*[.][^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0.0.0" : '[^.]*[.][^.]*[.][^.]*[.]\([^.]*\)' ')'
}

migrate_version() {
  CACHE_VERSION=$1

  if [[ $(vercmp ${MATTERMOST_VERSION} ${CACHE_VERSION}) -lt 0 ]]; then
    echo
    echo "ERROR: "
    echo "  Cannot downgrade from Mattermost version ${CACHE_VERSION} to ${MATTERMOST_VERSION}."
    echo "  Only upgrades are allowed. Please use jostyee/docker-mattermost:${CACHE_VERSION} or higher."
    echo "  Cannot continue. Aborting!"
    echo
    return 1
  fi
}

initialize_datadir() {
  echo "Initializing datadir..."
  chmod 755 ${MATTERMOST_DATA_DIR}
}

initialize() {
  echo "Initializing mattermost..."
  initialize_datadir
}

migrate() {
  INTERACTIVE=$([[ ${1} = "-interactive" ]] && echo 1 || echo 0)

  # check if this is a new installation
  case ${DB_ADAPTER} in
    mysql)
      QUERY="SELECT count(*) FROM information_schema.tables WHERE table_schema = '${DB_NAME}';"
      COUNT=$(mysql -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} ${DB_PASS:+-p$DB_PASS} -ss -e "${QUERY}")
      ;;
    postgres)
      QUERY="SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';"
      COUNT=$(PGPASSWORD="${DB_PASS}" psql -h ${DB_HOST} -p ${DB_PORT} -U ${DB_USER} -d ${DB_NAME} -Atw -c "${QUERY}")
      ;;
  esac

  if [[ -z ${COUNT} || ${COUNT} -eq 0 ]]; then
    echo "Configuring new Mattermost installation..."
  else
    # check if the mattermost version has changed.
    [[ -f ${MATTERMOST_DATA_DIR}/VERSION ]] && CACHE_VERSION=$(cat ${MATTERMOST_DATA_DIR}/VERSION)
    CACHE_VERSION=${CACHE_VERSION:-2.0.0}

    if [[ ${MATTERMOST_VERSION} != ${CACHE_VERSION} ]]; then
      migrate_version $CACHE_VERSION
    fi
  fi

  echo "${MATTERMOST_VERSION}" > ${MATTERMOST_DATA_DIR}/VERSION
}
